<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html>
	<head>
		<meta name="renderer" content="webkit">
		<meta http-equiv="X-UA-Compatible" content="IE=edge">
		<meta charset="utf-8" />
		<meta http-equiv="Cache-control" content="no-cache">
        <meta http-equiv="Cache" content="no-cache">
		<title>PTCHECK论文检测报告</title>
		<script type="text/javascript" src="htmls/js/jquery-1.7.1.min.js" ></script>
		<link rel="stylesheet" href="htmls/css/base.css" />
		<style type="text/css">
		  html,body
		  {
		  	height:100%;
		  	width:100%;
		  }
		  iframe
		  {
		  	margin:0;
		  	padding:0;
		  }
		  #mainContent{height:100%}
			.leftMenu
			{
				width:200px;
				float: left;
				height:100%;
				background-color:#666666;
			}
			.rightContent
			{
				
				margin-left: 200px;
				height:100%;
			
			}
			.logo
			{
				height: 86px;
				width:auto;
				background:url('images/logo_b.jpg') center no-repeat;
				background-color: #333333;
			}
			.navigation
			{
				background-color:#666666;
			}
		
		.navigation li{
			color:#fff;
			font-size:14px;
		}
		   
			.navigation li a{
				display:inline-block;
				height: 60px;		
				line-height:60px;
				color:#fff;
				padding-left:80px;
				padding-right:40px;
			}
			.navigation li span{
				display: none;
				}
			.navigation li:hover{
				background-color: #999;
				}
				
			.navigation li.active>span,.navigation li:hover>span{
				display: inline;
				}
				.navigation li.active{
					background-color: #0099ff;
				}
				.navigation li.active a
				{
					border-left: solid 4px #98d7ff;
					padding-left:76px;
				}
			
			.line
			{
				background: url('images/line.jpg') center no-repeat ;
				height:22px;
				width:200px;
			}
			.zonghepinggu
			{
				background: url('images/zhpg.png') no-repeat;
				background-position: 42px 50%;
			}
			.zonghepinggu:hover,.zonghepinggu.active
			{
				
			}
			.xiangxibaogao
			{
				background: url('images/xxbg.png') no-repeat;
				background-position: 42px 50%;
				
			}
			
			.jcym
			{
				background: url('images/jcym.png') no-repeat;
				background-position: 42px 50%;
			}
			
			.xgwd
			{
				background: url('images/xgwd.png') no-repeat;
				background-position: 42px 50%;
			}
			
			.pdf
			{
				background: url('images/pdf.png') no-repeat;
				background-position: 42px 50%;
			}
			
			.help
			{
				background: url('images/help.png') no-repeat;
				background-position: 42px 50%;
			}
			
			.kefu
			{
				background: url('images/kefu.png') no-repeat;
				background-position: 45px 50%;
			}
			
			.zhuce
			{
				background: url('images/zhuce.png') no-repeat;
				background-position: 42px 50%;
			}
			
			.gg
			{
				background: url('images/gg.png') no-repeat;
				background-position: 42px 50%;
			}
			.segment
			{
				background: url('images/segment.png') no-repeat;
				background-position: 42px 50%;
			}
			
			#rightContent
			{
				
			}
			.topInfo
			{
				height:86px;
				width:100%;
				background-color: #eeeeee;
				color:#333333;
				border-bottom: solid 1px #dddddd;
				position: relative;
			}
			.topPecent
			{
				background: url('images/circle.png') center no-repeat;
				padding-left: 20px;
				padding-right: 20px;
				height: 86px;
				width:60px;
				line-height: 90px;
				text-align: center;
				font-size:16px;
				float: left;
				font-weight: 600;
				padding-top: 2px;
			}
			.titleInfo
			{
				float: left;
			}
			.titleInfo span
			{
				font-size:28px;
			}
			.detailInfo
			{
				
				color:#666;
			}
			.detailInfo span{
				margin-right: 5px;
				font-size:12px;
			}
			.vline
			{
				background: url('images/vline.jpg') center no-repeat ;
				width:52px;
				height: 65px;
				float: left;
				margin-top:5px;
			}
			.topBtn
			{
				float: left;
				padding-top:20px;
			}
			.topBtn span{
				margin-right: 20px;
			}
			
			
			.btn-red
			{
				background: url('images/btn_red.png') center no-repeat;
				
			}
			.gonggao{
				font-size:14px;
			    padding-left:20px; 
			    left: 85px;
				bottom:5px;
				padding-left: 20px;
				position: absolute;
			}
			.laba
			{
				background: url('images/laba.png') center no-repeat;
				display: inline-block;
				height: 12px;
				left: -5px;
				position: relative;
				top: 0;
				width: 12px;
			}
		</style> 
		<script type="text/javascript">

		    window.onresize = function () {
		        myresize();
		    }

		    function myresize() {
		        var framborder = document.getElementById("myContent");
		        var myheight = framborder.offsetHeight - 88;
		        if (myheight < 562) {
		            myheight = 562;
		        }
		        document.getElementById("frameborder").style.height = myheight + "px";

		    }
			 
		</script>
		<script type="text/javascript">
		    var _allMessage;


		    function getClass(tagname, className) { //tagname指元素，className指class的值
		        var tagname = document.getElementsByTagName(tagname);  //获取指定元素
		        var tagnameAll = [];     //这个数组用于存储所有符合条件的元素
		        for (var i = 0; i < tagname.length; i++) {     //遍历获得的元素
		            if (tagname[i].className == className) {     //如果获得的元素中的class的值等于指定的类名，就赋值给tagnameAll
		                tagnameAll[tagnameAll.length] = tagname[i];
		            }
		        }
		        return tagnameAll;

		    }

		    var danhao;
		    var modifyPara = new Array();
		    function myset(paraseq, sen) {

		        var reg = new RegExp("\"", "g")
		        var model = "{\"para\":\"" + paraseq + "\",\"text\": \"" + sen + "\"}";
		        var mo = eval("(" + model + ")");
		        var exist = false;
		        for (var i = 0; i < modifyPara.length; i++) {
		            if (mo.para == modifyPara[i].para) {
		                exist = true;
		                modifyPara[i].text = mo.text;
		            }
		        }
		        if (!exist) {
		            modifyPara.push(mo);
		        }
		        delCookie(danhao);
		        setCookie(danhao, json_encode(modifyPara));
		    }
		    function trimStr(str) {

		        if ((typeof (str) != "string") || !str) {

		            return "";

		        }

		        return str.replace(/(^\s*)|(\s*$)/g, "");

		    }

		    window.onload = function () {
		        myresize();
		        $(".navigation li").click(function () {
		            $(".navigation li").removeClass("active");
		            $(this).addClass("active");
		        });
		        danhao = trimStr(document.getElementById("danhao").value);

		        //delCookie(danhao);
		        var result = getCookie(danhao);

		        if (result) {
		            modifyPara = eval("(" + result + ")");
		            //初始化子页面
		            //document.frames('ViewMain').location.reload();
		            // document.all.ViewMain.document.location.reload();

		            rightContent.window.location.href = rightContent.window.location.href;

		        }

		    }


		    //写cookies
		    function setCookie(name, value) {
		        var Days = 30;
		        var exp = new Date();
		        exp.setTime(exp.getTime() + Days * 24 * 60 * 60 * 1000);
		        document.cookie = name + "=" + escape(value) + ";expires=" + exp.toGMTString();
		    }

		    //读取cookies 
		    function getCookie(name) {
		        var arr, reg = new RegExp("(^| )" + name + "=([^;]*)(;|$)");

		        if (arr = document.cookie.match(reg)) return unescape(arr[2]);
		        else return null;
		    }

		    //删除cookies 
		    function delCookie(name) {
		        var exp = new Date();
		        exp.setTime(exp.getTime() - 1);
		        var cval = getCookie(name);
		        if (cval != null) document.cookie = name + "=" + cval + ";expires=" + exp.toGMTString();
		    }


		    function json_decode(str_json) {
		        // Decodes the JSON representation into a PHP value  
		        //  
		        // version: 906.1806  
		        // discuss at: http://phpjs.org/functions/json_decode  
		        // +      original by: Public Domain (http://www.json.org/json2.js)  
		        // + reimplemented by: Kevin van Zonneveld (http://kevin.vanzonneveld.net)  
		        // + improved by: T.J. Leahy  
		        // *     example 1: json_decode('[\n    "e",\n    {\n    "pluribus": "unum"\n}\n]');  
		        // *     returns 1: ['e', {pluribus: 'unum'}]  
		        /* 
		        http://www.JSON.org/json2.js 
		        2008-11-19 
		        Public Domain. 
		        NO WARRANTY EXPRESSED OR IMPLIED. USE AT YOUR OWN RISK. 
		        See http://www.JSON.org/js.html 
		        */

		        var json = this.window.JSON;
		        if (typeof json === 'object' && typeof json.parse === 'function') {
		            return json.parse(str_json);
		        }

		        var cx = /[\u0000\u00ad\u0600-\u0604\u070f\u17b4\u17b5\u200c-\u200f\u2028-\u202f\u2060-\u206f\ufeff\ufff0-\uffff]/g;
		        var j;
		        var text = str_json;

		        // Parsing happens in four stages. In the first stage, we replace certain  
		        // Unicode characters with escape sequences. JavaScript handles many characters  
		        // incorrectly, either silently deleting them, or treating them as line endings.  
		        cx.lastIndex = 0;
		        if (cx.test(text)) {
		            text = text.replace(cx, function (a) {
		                return '\\u' +
            ('0000' + a.charCodeAt(0).toString(16)).slice(-4);
		            });
		        }

		        // In the second stage, we run the text against regular expressions that look  
		        // for non-JSON patterns. We are especially concerned with '()' and 'new'  
		        // because they can cause invocation, and '=' because it can cause mutation.  
		        // But just to be safe, we want to reject all unexpected forms.  

		        // We split the second stage into 4 regexp operations in order to work around  
		        // crippling inefficiencies in IE's and Safari's regexp engines. First we  
		        // replace the JSON backslash pairs with '@' (a non-JSON character). Second, we  
		        // replace all simple value tokens with ']' characters. Third, we delete all  
		        // open brackets that follow a colon or comma or that begin the text. Finally,  
		        // we look to see that the remaining characters are only whitespace or ']' or  
		        // ',' or ':' or '{' or '}'. If that is so, then the text is safe for eval.  
		        if (/^[\],:{}\s]*$/.
        test(text.replace(/\\(?:["\\\/bfnrt]|u[0-9a-fA-F]8831324173510422411)/g, '@').
            replace(/"[^"\\\n\r]*"|true|false|null|-?\d+(?:\.\d*)?(?:[eE][+\-]?\d+)?/g, ']').
            replace(/(?:^|:|,)(?:\s*\[)+/g, ''))) {

		            // In the third stage we use the eval function to compile the text into a  
		            // JavaScript structure. The '{' operator is subject to a syntactic ambiguity  
		            // in JavaScript: it can begin a block or an object literal. We wrap the text  
		            // in parens to eliminate the ambiguity.  

		            j = eval('(' + text + ')');

		            return j;
		        }

		        // If the text is not JSON parseable, then a SyntaxError is thrown.  
		        throw new SyntaxError('json_decode');
		    }

		    function json_encode(mixed_val) {
		        // Returns the JSON representation of a value  
		        //  
		        // version: 906.1806  
		        // discuss at: http://phpjs.org/functions/json_encode  
		        // +      original by: Public Domain (http://www.json.org/json2.js)  
		        // + reimplemented by: Kevin van Zonneveld (http://kevin.vanzonneveld.net)  
		        // + improved by: T.J. Leahy  
		        // *     example 1: json_encode(['e', {pluribus: 'unum'}]);  
		        // *     returns 1: '[\n    "e",\n    {\n    "pluribus": "unum"\n}\n]'  
		        /* 
		        http://www.JSON.org/json2.js 
		        2008-11-19 
		        Public Domain. 
		        NO WARRANTY EXPRESSED OR IMPLIED. USE AT YOUR OWN RISK. 
		        See http://www.JSON.org/js.html 
		        */
		        var json = this.window.JSON;
		        if (typeof json === 'object' && typeof json.stringify === 'function') {
		            return json.stringify(mixed_val);
		        }

		        var value = mixed_val;

		        var quote = function (string) {
		            var escapable = /[\\\"\u0000-\u001f\u007f-\u009f\u00ad\u0600-\u0604\u070f\u17b4\u17b5\u200c-\u200f\u2028-\u202f\u2060-\u206f\ufeff\ufff0-\uffff]/g;
		            var meta = {    // table of character substitutions  
		                '\b': '\\b',
		                '\t': '\\t',
		                '\n': '\\n',
		                '\f': '\\f',
		                '\r': '\\r',
		                '"': '\\"',
		                '\\': '\\\\'
		            };

		            escapable.lastIndex = 0;
		            return escapable.test(string) ?
        '"' + string.replace(escapable, function (a) {
            var c = meta[a];
            return typeof c === 'string' ? c :
            '\\u' + ('0000' + a.charCodeAt(0).toString(16)).slice(-4);
        }) + '"' :
        '"' + string + '"';
		        };

		        var str = function (key, holder) {
		            var gap = '';
		            var indent = '    ';
		            var i = 0;          // The loop counter.  
		            var k = '';          // The member key.  
		            var v = '';          // The member value.  
		            var length = 0;
		            var mind = gap;
		            var partial = [];
		            var value = holder[key];

		            // If the value has a toJSON method, call it to obtain a replacement value.  
		            if (value && typeof value === 'object' &&
            typeof value.toJSON === 'function') {
		                value = value.toJSON(key);
		            }

		            // What happens next depends on the value's type.  
		            switch (typeof value) {
		                case 'string':
		                    return quote(value);

		                case 'number':
		                    // JSON numbers must be finite. Encode non-finite numbers as null.  
		                    return isFinite(value) ? String(value) : 'null';

		                case 'boolean':
		                case 'null':
		                    // If the value is a boolean or null, convert it to a string. Note:  
		                    // typeof null does not produce 'null'. The case is included here in  
		                    // the remote chance that this gets fixed someday.  

		                    return String(value);

		                case 'object':
		                    // If the type is 'object', we might be dealing with an object or an array or  
		                    // null.  
		                    // Due to a specification blunder in ECMAScript, typeof null is 'object',  
		                    // so watch out for that case.  
		                    if (!value) {
		                        return 'null';
		                    }

		                    // Make an array to hold the partial results of stringifying this object value.  
		                    gap += indent;
		                    partial = [];

		                    // Is the value an array?  
		                    if (Object.prototype.toString.apply(value) === '[object Array]') {
		                        // The value is an array. Stringify every element. Use null as a placeholder  
		                        // for non-JSON values.  

		                        length = value.length;
		                        for (i = 0; i < length; i += 1) {
		                            partial[i] = str(i, value) || 'null';
		                        }

		                        // Join all of the elements together, separated with commas, and wrap them in  
		                        // brackets.  
		                        v = partial.length === 0 ? '[]' :
                    gap ? '[\n' + gap +
                    partial.join(',\n' + gap) + '\n' +
                    mind + ']' :
                    '[' + partial.join(',') + ']';
		                        gap = mind;
		                        return v;
		                    }

		                    // Iterate through all of the keys in the object.  
		                    for (k in value) {
		                        if (Object.hasOwnProperty.call(value, k)) {
		                            v = str(k, value);
		                            if (v) {
		                                partial.push(quote(k) + (gap ? ': ' : ':') + v);
		                            }
		                        }
		                    }

		                    // Join all of the member texts together, separated with commas,  
		                    // and wrap them in braces.  
		                    v = partial.length === 0 ? '{}' :
                gap ? '{\n' + gap + partial.join(',\n' + gap) + '\n' +
                mind + '}' : '{' + partial.join(',') + '}';
		                    gap = mind;
		                    return v;
		            }
		        };

		        // Make a fake root object containing our value under the key of ''.  
		        // Return the result of stringifying the value.  
		        return str('', {
		            '': value
		        });
		    } 
    </script>
	</head>
	<body>
		<div id="mainContent">
			<div class="leftMenu">
				<div class="logo"></div>
				<ul class="navigation">
					<li class="xiangxibaogao active"><a href="htmls/detail_report.html" target="rightContent">详细报告</a><span>></span> </li>
					<li class="zonghepinggu "> <a href="htmls/comprehensive.html" target="rightContent">综合评估</a><span>></span> </li>
					<li class="xgwd"><a href="htmls/modify.html" target="rightContent">修改文档</a><span>></span> </li>
					<li class="segment"><a href="http://www.ptcheck.com/tea/segment.aspx" target="rightContent">片段查重</a><span>></span> </li>
					<li class="jcym"><a href="http://www.ptcheck.com/tea/pt.html" target="rightContent">检测页面</a><span>></span> </li>				
					<li class="pdf"><a href="htmls/PDF/PDFreport.pdf" target="rightContent">打印PDF</a><span>></span> </li>
					<li class="kefu"><a href="https://amos.alicdn.com/getcid.aw?site=cntaobao&groupid=0&s=1&uid=%70%74%63%68%65%63%6B%C6%EC%BD%A2%B5%EA" target="_blank">联系客服</a><span>></span> </li>
					<li class="help" style="display:none;"><a href="htmls/help.html" target="rightContent">使用帮助</a><span>></span> </li>			
					<div class="line"></div>			
				
					<li class="gg"><a href="htmls/notice.html"   target="rightContent">系统公告</a><span>></span> </li>
				
				</ul>
				
			</div>
			<div id="myContent" class="rightContent">
				<input type="hidden" id="danhao" value="883132417351042241"/>
				<div class="topInfo">
					<div class="topPecent green">32%</div>
					<div class="titleInfo">
						<span>883132417351042241</span>
						<div class="detailInfo"><span>作者：8831324173510422411</span><span>论文提交时间：2020/3/9 15:42:12</span></div>
						
					</div>
					<div class="vline"></div>
					<div class="topBtn">
						<a  href="http://www.ptcheck.com/ordercheck.aspx" target="_blank"><span class="btn btn-blue">验证真伪</span></a>
						<a href="https://amos.alicdn.com/getcid.aw?site=cntaobao&groupid=0&s=1&uid=%70%74%63%68%65%63%6B%C6%EC%BD%A2%B5%EA" target="_blank"><span class="btn btn-red">联系客服</span></a>
					</div>
					<div class="red gonggao" ><span class="laba"></span>最新公告：PTcheck检测系统优化部分检测算法，以及数据库的增加。如有疑问或建议，请随时联系客服</div>
					<div style="clear: both;"></div>
				</div>
				<div id="frameborder" style="height:100%;width:100%;">		
							
						<iframe id="rightContent" width="100%" name="rightContent" src="htmls/detail_report.html"  height="100%" border="0" marginheight="0" marginwidth="0" frameborder="no" ></iframe>					
				
	             </div>
				</div>
		</div>
	</body>
</html>
